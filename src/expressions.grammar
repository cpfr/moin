
{
    function UnaryExpression(op, value){
        this.op = op;
        this.value = value;
    }

    function BinaryExpression(left, op, right){
        this.left = left;
        this.op = op;
        this.right = right;
    }

    function leftAssociative(lefts, right) {
        if (!lefts.length) return right;
        var last = lefts.pop();
        return new BinaryExpression(
            leftAssociative(lefts, last[0]), last[1], right);
    }

    function rightAssociative(left, rights) {
        if (!rights.length) return left;
        var first = rights.shift();
        return new BinaryExpression(
            left, first[0], rightAssociative(first[1], rights));
    }
}

expression = asExpression
nonBinaryExpression = literal 
    / '(' exp:expression ')' { return exp; } / unaryExpression
unaryExpression = op:('-' / 'not') exp:nonBinaryExpression
                    { return new UnaryExpression(op, exp); }

literal = [a-z]+

asExpression = lefts:(exp:orExpression _ op:'as' _nonchar_ _ 
                    { return [exp,op]; })*
                right:orExpression
                { return leftAssociative(lefts, right); }

orExpression = lefts:(exp:andExpression _ op:'or' _nonchar_ _ 
                    { return [exp,op]; })*
                right:andExpression
                { return leftAssociative(lefts, right); }

andExpression = lefts:(exp:inExpression _ op:'and' _nonchar_ _ 
                    { return [exp,op]; })*
                right:inExpression
                { return leftAssociative(lefts, right); }

inExpression = lefts:(exp:eqExpression _ op:'in' _nonchar_ _ 
                    { return [exp,op]; })*
                right:eqExpression
                { return leftAssociative(lefts, right); }

eqExpression = lefts:(exp:cmpExpression _ 
                op:('=' / '!=' / isop:'is' _nonchar_ {return isop;} ) _ 
                    { return [exp, op]; })* right:cmpExpression
                { return leftAssociative(lefts, right); }

cmpExpression = lefts:(exp:addExpression _ op:('<' / '>' / '<=' / '>=') _
                    { return [exp,op]; })*
                right:addExpression
                { return leftAssociative(lefts, right); }

addExpression = lefts:(exp:mulExpression _ op:('+' / '-') _
                    { return [exp,op]; })*
                right:mulExpression
                { return leftAssociative(lefts, right); }

mulExpression = lefts:(exp:powExpression _ op:('*' / '/' / '%' ) _ 
                    { return [exp,op]; })*
                right:powExpression
                { return leftAssociative(lefts, right); }

/* power is right-associative */
powExpression = left:memberAccess rights:( _ op:'^' _ exp:memberAccess
                    { return [op, exp] })*
                { return rightAssociative(left, rights); }
/*powExpression = left:memberAccess op:('^') right:powExpression
                { return new BinaryExpression(left, op, right)}
            / memberAccess*/

memberAccess = lefts:(exp:nonBinaryExpression _ op:'.' _
                    { return [exp,op]; })*
                right:nonBinaryExpression
                { return leftAssociative(lefts, right); }


_ = (' ' / '\t' )* { return null; }
_nonchar_ = !([a-zA-Z]) { return null; }